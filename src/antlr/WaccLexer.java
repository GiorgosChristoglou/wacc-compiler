// Generated from ./WaccLexer.g4 by ANTLR 4.4
package antlr;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class WaccLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.4", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		IMPORT=1, FILE=2, SEMICOLON=3, BEGIN=4, IS=5, END=6, SKIP=7, READ=8, FREE=9, 
		RETURN=10, EXIT=11, PRINT=12, PRINTLN=13, IF=14, THEN=15, ELSE=16, FI=17, 
		WHILE=18, DO=19, DONE=20, NEWPAIR=21, CALL=22, FIRST=23, SECOND=24, INT=25, 
		BOOL=26, CHAR=27, STRING=28, PAIR=29, LEFT_PAR=30, RIGHT_PAR=31, LEFT_SQ=32, 
		RIGHT_SQ=33, COMMA=34, ASSIGNMENT=35, NOT=36, NEGATIVE=37, LEN=38, ORD=39, 
		CHR=40, TIMES=41, DIVIDED=42, MOD=43, PLUS=44, MINUS=45, GREATER=46, GREATER_OR_EQUAL=47, 
		LESS=48, LESS_OR_EQUAL=49, EQUAL=50, NOT_EQUAL=51, AND=52, OR=53, IDENT=54, 
		INTEGER=55, STRING_LITER=56, CHAR_LITER=57, TRUE=58, FALSE=59, NULL=60, 
		COMMENT=61, WHITESPACE=62;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] tokenNames = {
		"'\\u0000'", "'\\u0001'", "'\\u0002'", "'\\u0003'", "'\\u0004'", "'\\u0005'", 
		"'\\u0006'", "'\\u0007'", "'\b'", "'\t'", "'\n'", "'\\u000B'", "'\f'", 
		"'\r'", "'\\u000E'", "'\\u000F'", "'\\u0010'", "'\\u0011'", "'\\u0012'", 
		"'\\u0013'", "'\\u0014'", "'\\u0015'", "'\\u0016'", "'\\u0017'", "'\\u0018'", 
		"'\\u0019'", "'\\u001A'", "'\\u001B'", "'\\u001C'", "'\\u001D'", "'\\u001E'", 
		"'\\u001F'", "' '", "'!'", "'\"'", "'#'", "'$'", "'%'", "'&'", "'''", 
		"'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", "'0'", "'1'", 
		"'2'", "'3'", "'4'", "'5'", "'6'", "'7'", "'8'", "'9'", "':'", "';'", 
		"'<'", "'='", "'>'"
	};
	public static final String[] ruleNames = {
		"IMPORT", "FILE", "SEMICOLON", "BEGIN", "IS", "END", "SKIP", "READ", "FREE", 
		"RETURN", "EXIT", "PRINT", "PRINTLN", "IF", "THEN", "ELSE", "FI", "WHILE", 
		"DO", "DONE", "NEWPAIR", "CALL", "FIRST", "SECOND", "INT", "BOOL", "CHAR", 
		"STRING", "PAIR", "LEFT_PAR", "RIGHT_PAR", "LEFT_SQ", "RIGHT_SQ", "COMMA", 
		"ASSIGNMENT", "NOT", "NEGATIVE", "LEN", "ORD", "CHR", "TIMES", "DIVIDED", 
		"MOD", "PLUS", "MINUS", "GREATER", "GREATER_OR_EQUAL", "LESS", "LESS_OR_EQUAL", 
		"EQUAL", "NOT_EQUAL", "AND", "OR", "IDENT", "DIGIT", "INTEGER", "ESC", 
		"STRING_LITER", "CHAR_LITER", "TRUE", "FALSE", "NULL", "COMMENT", "WHITESPACE"
	};


	public WaccLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "WaccLexer.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2@\u01af\b\1\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\3\7\3\u008c\n\3"+
		"\f\3\16\3\u008f\13\3\3\3\3\3\3\3\3\3\3\3\3\3\3\4\3\4\3\5\3\5\3\5\3\5\3"+
		"\5\3\5\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3\b\3\b\3\b\3\b\3\b\3\t\3\t\3\t\3\t"+
		"\3\t\3\n\3\n\3\n\3\n\3\n\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\f\3\f\3"+
		"\f\3\f\3\f\3\r\3\r\3\r\3\r\3\r\3\r\3\16\3\16\3\16\3\16\3\16\3\16\3\16"+
		"\3\16\3\17\3\17\3\17\3\20\3\20\3\20\3\20\3\20\3\21\3\21\3\21\3\21\3\21"+
		"\3\22\3\22\3\22\3\23\3\23\3\23\3\23\3\23\3\23\3\24\3\24\3\24\3\25\3\25"+
		"\3\25\3\25\3\25\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\27\3\27\3\27"+
		"\3\27\3\27\3\30\3\30\3\30\3\30\3\31\3\31\3\31\3\31\3\32\3\32\3\32\3\32"+
		"\3\33\3\33\3\33\3\33\3\33\3\34\3\34\3\34\3\34\3\34\3\35\3\35\3\35\3\35"+
		"\3\35\3\35\3\35\3\36\3\36\3\36\3\36\3\36\3\37\3\37\3 \3 \3!\3!\3\"\3\""+
		"\3#\3#\3$\3$\3%\3%\3&\3&\3\'\3\'\3\'\3\'\3(\3(\3(\3(\3)\3)\3)\3)\3*\3"+
		"*\3+\3+\3,\3,\3-\3-\3.\3.\3/\3/\3\60\3\60\3\60\3\61\3\61\3\62\3\62\3\62"+
		"\3\63\3\63\3\63\3\64\3\64\3\64\3\65\3\65\3\65\3\66\3\66\3\66\3\67\3\67"+
		"\7\67\u015a\n\67\f\67\16\67\u015d\13\67\38\38\39\59\u0162\n9\39\69\u0165"+
		"\n9\r9\169\u0166\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\3"+
		":\5:\u017b\n:\3;\3;\3;\7;\u0180\n;\f;\16;\u0183\13;\3;\3;\3<\3<\3<\7<"+
		"\u018a\n<\f<\16<\u018d\13<\3<\3<\3=\3=\3=\3=\3=\3>\3>\3>\3>\3>\3>\3?\3"+
		"?\3?\3?\3?\3@\3@\7@\u01a3\n@\f@\16@\u01a6\13@\3@\3@\3@\3@\3A\3A\3A\3A"+
		"\5\u0181\u018b\u01a4\2B\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f"+
		"\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63"+
		"\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]\60_\61a\62"+
		"c\63e\64g\65i\66k\67m8o\2q9s\2u:w;y<{=}>\177?\u0081@\3\2\7\4\2\62;C|\5"+
		"\2C\\aac|\6\2\62;C\\aac|\4\2--//\5\2\13\f\17\17\"\"\u01bd\2\3\3\2\2\2"+
		"\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2"+
		"\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2"+
		"\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2"+
		"\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2"+
		"\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2"+
		"\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2"+
		"\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W"+
		"\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2\2a\3\2\2\2\2c\3\2"+
		"\2\2\2e\3\2\2\2\2g\3\2\2\2\2i\3\2\2\2\2k\3\2\2\2\2m\3\2\2\2\2q\3\2\2\2"+
		"\2u\3\2\2\2\2w\3\2\2\2\2y\3\2\2\2\2{\3\2\2\2\2}\3\2\2\2\2\177\3\2\2\2"+
		"\2\u0081\3\2\2\2\3\u0083\3\2\2\2\5\u008d\3\2\2\2\7\u0096\3\2\2\2\t\u0098"+
		"\3\2\2\2\13\u009e\3\2\2\2\r\u00a1\3\2\2\2\17\u00a5\3\2\2\2\21\u00aa\3"+
		"\2\2\2\23\u00af\3\2\2\2\25\u00b4\3\2\2\2\27\u00bb\3\2\2\2\31\u00c0\3\2"+
		"\2\2\33\u00c6\3\2\2\2\35\u00ce\3\2\2\2\37\u00d1\3\2\2\2!\u00d6\3\2\2\2"+
		"#\u00db\3\2\2\2%\u00de\3\2\2\2\'\u00e4\3\2\2\2)\u00e7\3\2\2\2+\u00ec\3"+
		"\2\2\2-\u00f4\3\2\2\2/\u00f9\3\2\2\2\61\u00fd\3\2\2\2\63\u0101\3\2\2\2"+
		"\65\u0105\3\2\2\2\67\u010a\3\2\2\29\u010f\3\2\2\2;\u0116\3\2\2\2=\u011b"+
		"\3\2\2\2?\u011d\3\2\2\2A\u011f\3\2\2\2C\u0121\3\2\2\2E\u0123\3\2\2\2G"+
		"\u0125\3\2\2\2I\u0127\3\2\2\2K\u0129\3\2\2\2M\u012b\3\2\2\2O\u012f\3\2"+
		"\2\2Q\u0133\3\2\2\2S\u0137\3\2\2\2U\u0139\3\2\2\2W\u013b\3\2\2\2Y\u013d"+
		"\3\2\2\2[\u013f\3\2\2\2]\u0141\3\2\2\2_\u0143\3\2\2\2a\u0146\3\2\2\2c"+
		"\u0148\3\2\2\2e\u014b\3\2\2\2g\u014e\3\2\2\2i\u0151\3\2\2\2k\u0154\3\2"+
		"\2\2m\u0157\3\2\2\2o\u015e\3\2\2\2q\u0161\3\2\2\2s\u017a\3\2\2\2u\u017c"+
		"\3\2\2\2w\u0186\3\2\2\2y\u0190\3\2\2\2{\u0195\3\2\2\2}\u019b\3\2\2\2\177"+
		"\u01a0\3\2\2\2\u0081\u01ab\3\2\2\2\u0083\u0084\7k\2\2\u0084\u0085\7o\2"+
		"\2\u0085\u0086\7r\2\2\u0086\u0087\7q\2\2\u0087\u0088\7t\2\2\u0088\u0089"+
		"\7v\2\2\u0089\4\3\2\2\2\u008a\u008c\t\2\2\2\u008b\u008a\3\2\2\2\u008c"+
		"\u008f\3\2\2\2\u008d\u008b\3\2\2\2\u008d\u008e\3\2\2\2\u008e\u0090\3\2"+
		"\2\2\u008f\u008d\3\2\2\2\u0090\u0091\7\60\2\2\u0091\u0092\7y\2\2\u0092"+
		"\u0093\7c\2\2\u0093\u0094\7e\2\2\u0094\u0095\7e\2\2\u0095\6\3\2\2\2\u0096"+
		"\u0097\7=\2\2\u0097\b\3\2\2\2\u0098\u0099\7d\2\2\u0099\u009a\7g\2\2\u009a"+
		"\u009b\7i\2\2\u009b\u009c\7k\2\2\u009c\u009d\7p\2\2\u009d\n\3\2\2\2\u009e"+
		"\u009f\7k\2\2\u009f\u00a0\7u\2\2\u00a0\f\3\2\2\2\u00a1\u00a2\7g\2\2\u00a2"+
		"\u00a3\7p\2\2\u00a3\u00a4\7f\2\2\u00a4\16\3\2\2\2\u00a5\u00a6\7u\2\2\u00a6"+
		"\u00a7\7m\2\2\u00a7\u00a8\7k\2\2\u00a8\u00a9\7r\2\2\u00a9\20\3\2\2\2\u00aa"+
		"\u00ab\7t\2\2\u00ab\u00ac\7g\2\2\u00ac\u00ad\7c\2\2\u00ad\u00ae\7f\2\2"+
		"\u00ae\22\3\2\2\2\u00af\u00b0\7h\2\2\u00b0\u00b1\7t\2\2\u00b1\u00b2\7"+
		"g\2\2\u00b2\u00b3\7g\2\2\u00b3\24\3\2\2\2\u00b4\u00b5\7t\2\2\u00b5\u00b6"+
		"\7g\2\2\u00b6\u00b7\7v\2\2\u00b7\u00b8\7w\2\2\u00b8\u00b9\7t\2\2\u00b9"+
		"\u00ba\7p\2\2\u00ba\26\3\2\2\2\u00bb\u00bc\7g\2\2\u00bc\u00bd\7z\2\2\u00bd"+
		"\u00be\7k\2\2\u00be\u00bf\7v\2\2\u00bf\30\3\2\2\2\u00c0\u00c1\7r\2\2\u00c1"+
		"\u00c2\7t\2\2\u00c2\u00c3\7k\2\2\u00c3\u00c4\7p\2\2\u00c4\u00c5\7v\2\2"+
		"\u00c5\32\3\2\2\2\u00c6\u00c7\7r\2\2\u00c7\u00c8\7t\2\2\u00c8\u00c9\7"+
		"k\2\2\u00c9\u00ca\7p\2\2\u00ca\u00cb\7v\2\2\u00cb\u00cc\7n\2\2\u00cc\u00cd"+
		"\7p\2\2\u00cd\34\3\2\2\2\u00ce\u00cf\7k\2\2\u00cf\u00d0\7h\2\2\u00d0\36"+
		"\3\2\2\2\u00d1\u00d2\7v\2\2\u00d2\u00d3\7j\2\2\u00d3\u00d4\7g\2\2\u00d4"+
		"\u00d5\7p\2\2\u00d5 \3\2\2\2\u00d6\u00d7\7g\2\2\u00d7\u00d8\7n\2\2\u00d8"+
		"\u00d9\7u\2\2\u00d9\u00da\7g\2\2\u00da\"\3\2\2\2\u00db\u00dc\7h\2\2\u00dc"+
		"\u00dd\7k\2\2\u00dd$\3\2\2\2\u00de\u00df\7y\2\2\u00df\u00e0\7j\2\2\u00e0"+
		"\u00e1\7k\2\2\u00e1\u00e2\7n\2\2\u00e2\u00e3\7g\2\2\u00e3&\3\2\2\2\u00e4"+
		"\u00e5\7f\2\2\u00e5\u00e6\7q\2\2\u00e6(\3\2\2\2\u00e7\u00e8\7f\2\2\u00e8"+
		"\u00e9\7q\2\2\u00e9\u00ea\7p\2\2\u00ea\u00eb\7g\2\2\u00eb*\3\2\2\2\u00ec"+
		"\u00ed\7p\2\2\u00ed\u00ee\7g\2\2\u00ee\u00ef\7y\2\2\u00ef\u00f0\7r\2\2"+
		"\u00f0\u00f1\7c\2\2\u00f1\u00f2\7k\2\2\u00f2\u00f3\7t\2\2\u00f3,\3\2\2"+
		"\2\u00f4\u00f5\7e\2\2\u00f5\u00f6\7c\2\2\u00f6\u00f7\7n\2\2\u00f7\u00f8"+
		"\7n\2\2\u00f8.\3\2\2\2\u00f9\u00fa\7h\2\2\u00fa\u00fb\7u\2\2\u00fb\u00fc"+
		"\7v\2\2\u00fc\60\3\2\2\2\u00fd\u00fe\7u\2\2\u00fe\u00ff\7p\2\2\u00ff\u0100"+
		"\7f\2\2\u0100\62\3\2\2\2\u0101\u0102\7k\2\2\u0102\u0103\7p\2\2\u0103\u0104"+
		"\7v\2\2\u0104\64\3\2\2\2\u0105\u0106\7d\2\2\u0106\u0107\7q\2\2\u0107\u0108"+
		"\7q\2\2\u0108\u0109\7n\2\2\u0109\66\3\2\2\2\u010a\u010b\7e\2\2\u010b\u010c"+
		"\7j\2\2\u010c\u010d\7c\2\2\u010d\u010e\7t\2\2\u010e8\3\2\2\2\u010f\u0110"+
		"\7u\2\2\u0110\u0111\7v\2\2\u0111\u0112\7t\2\2\u0112\u0113\7k\2\2\u0113"+
		"\u0114\7p\2\2\u0114\u0115\7i\2\2\u0115:\3\2\2\2\u0116\u0117\7r\2\2\u0117"+
		"\u0118\7c\2\2\u0118\u0119\7k\2\2\u0119\u011a\7t\2\2\u011a<\3\2\2\2\u011b"+
		"\u011c\7*\2\2\u011c>\3\2\2\2\u011d\u011e\7+\2\2\u011e@\3\2\2\2\u011f\u0120"+
		"\7]\2\2\u0120B\3\2\2\2\u0121\u0122\7_\2\2\u0122D\3\2\2\2\u0123\u0124\7"+
		".\2\2\u0124F\3\2\2\2\u0125\u0126\7?\2\2\u0126H\3\2\2\2\u0127\u0128\7#"+
		"\2\2\u0128J\3\2\2\2\u0129\u012a\7/\2\2\u012aL\3\2\2\2\u012b\u012c\7n\2"+
		"\2\u012c\u012d\7g\2\2\u012d\u012e\7p\2\2\u012eN\3\2\2\2\u012f\u0130\7"+
		"q\2\2\u0130\u0131\7t\2\2\u0131\u0132\7f\2\2\u0132P\3\2\2\2\u0133\u0134"+
		"\7e\2\2\u0134\u0135\7j\2\2\u0135\u0136\7t\2\2\u0136R\3\2\2\2\u0137\u0138"+
		"\7,\2\2\u0138T\3\2\2\2\u0139\u013a\7\61\2\2\u013aV\3\2\2\2\u013b\u013c"+
		"\7\'\2\2\u013cX\3\2\2\2\u013d\u013e\7-\2\2\u013eZ\3\2\2\2\u013f\u0140"+
		"\7/\2\2\u0140\\\3\2\2\2\u0141\u0142\7@\2\2\u0142^\3\2\2\2\u0143\u0144"+
		"\7@\2\2\u0144\u0145\7?\2\2\u0145`\3\2\2\2\u0146\u0147\7>\2\2\u0147b\3"+
		"\2\2\2\u0148\u0149\7>\2\2\u0149\u014a\7?\2\2\u014ad\3\2\2\2\u014b\u014c"+
		"\7?\2\2\u014c\u014d\7?\2\2\u014df\3\2\2\2\u014e\u014f\7#\2\2\u014f\u0150"+
		"\7?\2\2\u0150h\3\2\2\2\u0151\u0152\7(\2\2\u0152\u0153\7(\2\2\u0153j\3"+
		"\2\2\2\u0154\u0155\7~\2\2\u0155\u0156\7~\2\2\u0156l\3\2\2\2\u0157\u015b"+
		"\t\3\2\2\u0158\u015a\t\4\2\2\u0159\u0158\3\2\2\2\u015a\u015d\3\2\2\2\u015b"+
		"\u0159\3\2\2\2\u015b\u015c\3\2\2\2\u015cn\3\2\2\2\u015d\u015b\3\2\2\2"+
		"\u015e\u015f\4\62;\2\u015fp\3\2\2\2\u0160\u0162\t\5\2\2\u0161\u0160\3"+
		"\2\2\2\u0161\u0162\3\2\2\2\u0162\u0164\3\2\2\2\u0163\u0165\5o8\2\u0164"+
		"\u0163\3\2\2\2\u0165\u0166\3\2\2\2\u0166\u0164\3\2\2\2\u0166\u0167\3\2"+
		"\2\2\u0167r\3\2\2\2\u0168\u0169\7^\2\2\u0169\u017b\7\62\2\2\u016a\u016b"+
		"\7^\2\2\u016b\u017b\7d\2\2\u016c\u016d\7^\2\2\u016d\u017b\7v\2\2\u016e"+
		"\u016f\7^\2\2\u016f\u017b\7p\2\2\u0170\u0171\7^\2\2\u0171\u017b\7h\2\2"+
		"\u0172\u0173\7^\2\2\u0173\u017b\7t\2\2\u0174\u0175\7^\2\2\u0175\u017b"+
		"\7$\2\2\u0176\u0177\7^\2\2\u0177\u017b\7)\2\2\u0178\u0179\7^\2\2\u0179"+
		"\u017b\7^\2\2\u017a\u0168\3\2\2\2\u017a\u016a\3\2\2\2\u017a\u016c\3\2"+
		"\2\2\u017a\u016e\3\2\2\2\u017a\u0170\3\2\2\2\u017a\u0172\3\2\2\2\u017a"+
		"\u0174\3\2\2\2\u017a\u0176\3\2\2\2\u017a\u0178\3\2\2\2\u017bt\3\2\2\2"+
		"\u017c\u0181\7$\2\2\u017d\u0180\5s:\2\u017e\u0180\13\2\2\2\u017f\u017d"+
		"\3\2\2\2\u017f\u017e\3\2\2\2\u0180\u0183\3\2\2\2\u0181\u0182\3\2\2\2\u0181"+
		"\u017f\3\2\2\2\u0182\u0184\3\2\2\2\u0183\u0181\3\2\2\2\u0184\u0185\7$"+
		"\2\2\u0185v\3\2\2\2\u0186\u018b\7)\2\2\u0187\u018a\5s:\2\u0188\u018a\13"+
		"\2\2\2\u0189\u0187\3\2\2\2\u0189\u0188\3\2\2\2\u018a\u018d\3\2\2\2\u018b"+
		"\u018c\3\2\2\2\u018b\u0189\3\2\2\2\u018c\u018e\3\2\2\2\u018d\u018b\3\2"+
		"\2\2\u018e\u018f\7)\2\2\u018fx\3\2\2\2\u0190\u0191\7v\2\2\u0191\u0192"+
		"\7t\2\2\u0192\u0193\7w\2\2\u0193\u0194\7g\2\2\u0194z\3\2\2\2\u0195\u0196"+
		"\7h\2\2\u0196\u0197\7c\2\2\u0197\u0198\7n\2\2\u0198\u0199\7u\2\2\u0199"+
		"\u019a\7g\2\2\u019a|\3\2\2\2\u019b\u019c\7p\2\2\u019c\u019d\7w\2\2\u019d"+
		"\u019e\7n\2\2\u019e\u019f\7n\2\2\u019f~\3\2\2\2\u01a0\u01a4\7%\2\2\u01a1"+
		"\u01a3\13\2\2\2\u01a2\u01a1\3\2\2\2\u01a3\u01a6\3\2\2\2\u01a4\u01a5\3"+
		"\2\2\2\u01a4\u01a2\3\2\2\2\u01a5\u01a7\3\2\2\2\u01a6\u01a4\3\2\2\2\u01a7"+
		"\u01a8\7\f\2\2\u01a8\u01a9\3\2\2\2\u01a9\u01aa\b@\2\2\u01aa\u0080\3\2"+
		"\2\2\u01ab\u01ac\t\6\2\2\u01ac\u01ad\3\2\2\2\u01ad\u01ae\bA\2\2\u01ae"+
		"\u0082\3\2\2\2\r\2\u008d\u015b\u0161\u0166\u017a\u017f\u0181\u0189\u018b"+
		"\u01a4\3\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}